
@section TP {The qtlua interpreter tool}

  @section T{Description}

    The QtLua project comes with a simple tool to experiment Qt enabled lua scripts.
    
    Lua script files passed on command line are executed in left to
    right order. Standard lua libraries are loaded along with the
    @xref{QtLua lua libraries}. the lua global variable @tt app is
    wrapping the @ref QApplication object.

    This tool has an interactive mode which displays a @ref QtLua::Console window.
    This is useful for script debugging and allows playing with Qt objects from lua.

    The interactive mode is automatically started if no script are passed
    on command line, it can also be invoked with the @tt -i option on
    the command line and will start after scripts execution.

    When in interactive mode, the @tt{list()} and @tt{help()} commands
    are useful to get started.

  @end section

  @section T{Example 1 : Hello world}

    This simple example contains two files: a lua script file and an user
    interface file created with the Qt @tt designer tool:

    @code R
  $ cd examples/lua/hello/
  $ ls
  hello.lua  hello.ui
    @end code
    
    Lua script file content:
    
    @example examples/lua/hello/hello.lua R
    
    This window is displayed when the script is executed with the @tt qtlua interpreter tool:
    
    @image hello_ui.png

  @end section

  @section T{Example 2 : Console use}

    This example shows how the @tt qtlua interactive mode can be used to create widgets,
    set properties and play with Qt objects.

    The first screenshot partially shows the list of available fields in a newly created @ref QSpinBox widget:

    @image qtlua_console_1.png

    The second screenshot shows how to update the spinbox buttons style property using the right Qt enumeration value:

    @image qtlua_console_2.png

  @end section

@end section
